scalar Time

# TypeDefs
type User {
  id: ID!
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  meetups: [Meetup!]!
  createdAt: Time!
  updatedAt: Time!
}

type Meetup {
  id: ID!
  name: String!
  description: String!
  user: User!
}
type Response {
  message: String!
}

type AuthToken {
  accessToken: String!
  expiredAt: Time!
}

type AuthResponse {
  authToken: AuthToken!
  user: User!
}
#==========================================================
# Input
input MeetupFilterInput {
  name: String
}

input NewMeetupInput {
  name: String!
  description: String!
}

input UpdateMeetupInput {
  name: String
  description: String
}

input RegisterInput {
  username: String!
  email: String!
  password: String!
  confirmPassword: String!
  firstName: String!
  lastName: String!
}

input LoginInput {
  email: String!
  password: String!
}

# Query
type Query {
  meetups(
    filter: MeetupFilterInput
    limit: Int = 10
    offset: Int = 0
  ): [Meetup!]!
  user(id: ID!): User!
}
#==========================================================
# Mutation
type Mutation {
  register(input: RegisterInput!): AuthResponse!
  login(input: LoginInput!): AuthResponse!
  createMeetup(input: NewMeetupInput!): Meetup!
  updateMeetup(id: ID!, input: UpdateMeetupInput!): Meetup!
  deleteMeetup(id: ID!): Response!
}
